

#include <stdio.h>
#include "L138_LCDK_aic3106_init.h"
#include "L138_LCDK_switch_led.h"
#include <math.h>
#include "evmomapl138_gpio.h"
#include <stdint.h>
#include <ti/dsplib/dsplib.h>


//inclusions for PINMUX for any GPIO pins
#include "gpio.h"
#include "psc.h"
#include "soc_OMAPL138.h"
#include "lcdkOMAPL138.h"
#include "hw_types.h"
#include "hw_syscfg0_OMAPL138.h"

// Global Definitions and Variables

#define PI 3.14159265358979323
#define N 1024
#define PINMUX18_GPIO8_10_ENABLE (SYSCFG_PINMUX18_PINMUX18_31_28_GPIO8_10 << \
SYSCFG_PINMUX18_PINMUX18_31_28_SHIFT)
#define PINMUX18_GPIO8_12_ENABLE (SYSCFG_PINMUX18_PINMUX18_23_20_GPIO8_12  << \
SYSCFG_PINMUX18_PINMUX18_23_20_SHIFT)

int data;
int counter;
int count_switch;
int switch5;
int switch6;
int switch7;
int switch8;
int LED_succesion_flag = 0;
int m=0;
int M = 26;
int n=0;
int j=0;
int k=0;
float indexer = 0.0;
int K = (1024/2)+1;
int repeat=0;
int output;

float alpha = .54;
float beta = .46;
int flag = 0;
float y[13];

int blinker_counter=0;
int blinker_numberfive=0;
int twice=0;

//Data Arrays
float microphone[1024];
int hundred = 0;
float hanning[1024];
float product[1024];
float magnitude[1024];
float fmel[28];
float lambda[28];
float freqResp[26][513];
float multAccum[26];
float xi[26];
float mfcc[13];
float phi[28];
float h[13];
float temp;
float sx[5];
float ox[4];
float output1[4];
float summationOfx = 0.0;

float x1_step1_xoffset[Z] = {11.26513,-5.615382,-3.293619,-9.366388,-6.556208,-4.351458,-3.955627,-2.391999,-3.239231,-3.433952,-2.997518,-3.285926,-2.714997};
float x1_step1_gain[Z] = {0.170696527179155,0.154246340042843,0.185762890574605,0.169973746704953,0.260975112630334,0.216738826246552,0.204113520183612,0.309175924037949,0.362442543795745,0.223483163895848,0.27739755049641,0.298178976265103,0.340029592775459};
float x1_step1_ymin = -1.0;
float b1[P] = {0.14373068693840551635,0.37841128416378938537,-0.30048105040013495248,0.28206509998356754654,-0.64079599628568650882};
float IW1_1[P][Z] = {{-0.71311405796756266451, 1.0284110664193910623, 0.39771119684722922027, -0.45263126947955678592, -1.2903716512711147502, -0.58924493709827385768, 1.6860836289388339004, 0.44696257628888197422, -1.0533804833327775619, -0.49259785791086396767, -0.97983632129244258024, -0.51272535666783258801, 0.70274738909251110996},{1.3314604245975067975, -0.095810788882532013644, 0.44285063276981745384, -1.2516945037451208123, 1.2503137814558715757, 2.0499881744654024907, -0.78024950826062022813, -0.75528065464896920744, 0.035449063409741368713, -0.88370337772331153392, 1.3635317468153300702, -0.28473115984837599202, -0.60693919284959363392},{0.16696720574890588917, -2.032385631403599735, -0.69931006872660206319, 0.42115893386123393061, 1.0470712574562837105, 0.04196786625205729121, -0.36345114908523723507, 0.08108183180290232106, 1.0107278194828863693, 0.4354260644634766475, -0.41763287630024154007, 0.04753259458673513016, -0.14665172114729199682},{0.77043064804882044339, 0.16056074525601393699, 0.93698586095693192632, 1.2488646831818537297, 0.93439367130903583369, 0.26087977481309571059, -1.3684165591254082717, 0.08907373115497671523, -0.43976755393472805045, -0.8528402526892266966, -0.5230108229724657054, -0.13587082647993919959, 0.66665758119819151784},{-0.79044099982621596201, -1.1528661123072876382, -1.7729516111421368407, -0.99394426844212158123, -0.5567544012594863867, 0.5545076435666758119, 0.048502155718701027431, -0.27415262430217179901, 0.24310337856247210553, 0.39991392869833702894 ,0.99544610970172231479, -0.24334611673075626226, 0.46677676021040281906}};
float b2[Q] = {0.73282708551122954788,-0.67960527630403333443,-0.57807198227800327128,-0.23786130376432643163};
float LW2_1[Q][P] = {{0.68703853250893553994, 2.7271500132449348897, -4.0400528715650052547, 1.4475882573882588034, -1.6790056771880326192},{-1.9529698068351197815, -2.4537221053399771442, 2.296753244824978335, 2.9447293811511130457, -1.772684601582666053},{-2.4022771555648780861, 4.1171487301385347735, 1.9809772169859267699, -0.99922355546870866849, 2.3560873446863803693},{3.2050537758451085324, -3.6896327083360964671, -0.007184539358630827495, -2.9315827682156747613, 1.6814220452424899488}};


/* Align the tables that we have to use */

// The DATA_ALIGN pragma aligns the symbol in C, or the next symbol declared in C++, to an alignment boundary.
// The alignment boundary is the maximum of the symbol's default alignment value or the value of the constant in bytes.
// The constant must be a power of 2. The maximum alignment is 32768.
// The DATA_ALIGN pragma cannot be used to reduce an object's natural alignment.

//The following code will locate mybyte at an even address.
//#pragma DATA_ALIGN(mybyte, 2)
//char mybyte;

//The following code will locate mybuffer at an address that is evenly divisible by 1024.
//#pragma DATA_ALIGN(mybuffer, 1024)
//char mybuffer[256];
#pragma DATA_ALIGN(x_in,8);
int16_t x_in[2048];

#pragma DATA_ALIGN(x_sp,8);
float   x_sp [2048];
#pragma DATA_ALIGN(y_sp,8);
float   y_sp [2048];
#pragma DATA_ALIGN(w_sp,8);
float   w_sp [2048];

// brev routine called by FFT routine
unsigned char brev[64] = {
		0x0, 0x20, 0x10, 0x30, 0x8, 0x28, 0x18, 0x38,
		0x4, 0x24, 0x14, 0x34, 0xc, 0x2c, 0x1c, 0x3c,
		0x2, 0x22, 0x12, 0x32, 0xa, 0x2a, 0x1a, 0x3a,
		0x6, 0x26, 0x16, 0x36, 0xe, 0x2e, 0x1e, 0x3e,
		0x1, 0x21, 0x11, 0x31, 0x9, 0x29, 0x19, 0x39,
		0x5, 0x25, 0x15, 0x35, 0xd, 0x2d, 0x1d, 0x3d,
		0x3, 0x23, 0x13, 0x33, 0xb, 0x2b, 0x1b, 0x3b,
		0x7, 0x27, 0x17, 0x37, 0xf, 0x2f, 0x1f, 0x3f
};

// The seperateRealImg function separates the real and imaginary data
// of the FFT output. This is needed so that the data can be plotted
// using the CCS graph feature
float y_real_sp [1024];
float y_imag_sp [1024];

separateRealImg () {
	int i, j;

	for (i = 0, j = 0; j < N; i+=2, j++) {
		y_real_sp[j] = y_sp[i];
		y_imag_sp[j] = y_sp[i + 1];
	}
}

// Function for generating sequence of twiddle factors
void gen_twiddle_fft_sp (float *w, int n)
{
	int i, j, k;
	double x_t, y_t, theta1, theta2, theta3;

	for (j = 1, k = 0; j <= n >> 2; j = j << 2)
	{
		for (i = 0; i < n >> 2; i += j)
		{
			theta1 = 2 * PI * i / n;
			x_t = cos (theta1);
			y_t = sin (theta1);
			w[k] = (float) x_t;
			w[k + 1] = (float) y_t;

			theta2 = 4 * PI * i / n;
			x_t = cos (theta2);
			y_t = sin (theta2);
			w[k + 2] = (float) x_t;
			w[k + 3] = (float) y_t;

			theta3 = 6 * PI * i / n;
			x_t = cos (theta3);
			y_t = sin (theta3);
			w[k + 4] = (float) x_t;
			w[k + 5] = (float) y_t;
			k += 6;
		}
	}
}

//Blink Operations
void led_blinker()
{
	if (blinker_counter < 4000)
	{
		LCDK_LED_on(4);
		LCDK_LED_on(5);
		LCDK_LED_on(6);
		LCDK_LED_on(7);
		blinker_counter++;
	}
	else if (blinker_counter < 8000)
	{
		LCDK_LED_off(4);
		LCDK_LED_off(5);
		LCDK_LED_off(6);
		LCDK_LED_off(7);
		blinker_counter++;
	}
	else if (blinker_counter == 8000){
		blinker_counter=0;
	}
	return;
}

//Record and Switch Operations
void led_numberfive()
{
	if (blinker_numberfive < 8000)
	{
		LCDK_LED_on(4);
		LCDK_LED_off(5);
		LCDK_LED_off(6);
		LCDK_LED_off(7);
		blinker_numberfive++;
	}
	else if (blinker_numberfive < 16000)
	{
		LCDK_LED_off(4);
		LCDK_LED_on(5);
		LCDK_LED_off(6);
		LCDK_LED_off(7);
		blinker_numberfive++;
	}
	else if (blinker_numberfive < 24000){
		LCDK_LED_off(4);
		LCDK_LED_off(5);
		LCDK_LED_on(6);
		LCDK_LED_off(7);
		blinker_numberfive++;
	}
	else if (blinker_numberfive < 32000){
		LCDK_LED_off(4);
		LCDK_LED_off(5);
		LCDK_LED_off(6);
		LCDK_LED_on(7);
		blinker_numberfive++;
	}
	if (blinker_numberfive == 32000)
	{
		LED_succesion_flag = 1;
	}
	return;
}

//Check Switch State
void switch_state()
{
	switch5 = LCDK_SWITCH_state(5);
	switch6 = LCDK_SWITCH_state(6);
	switch7 = LCDK_SWITCH_state(7);
	switch8 = LCDK_SWITCH_state(8);
	count_switch = switch5+switch6+switch7+switch8;
}

//FFT Magnitude
magnitudeFFT()
{
	int r;
	for(r=0; r<N; r++)
	{
		magnitude[r] = ((y_real_sp[r]*y_real_sp[r])+(y_imag_sp[r]*y_imag_sp[r]));
	}

}

//Mel Frequencies
fMelCalc()
{
	int r;
	for(r=0; r<28; r++)
	{
		fmel[r] = 2595*log10(1+(250.0+r*287.0)/700.0);

	}

}

//Phi Values
phiCalc()
{
	int r;
	for(r=0; r<28; r++)
	{
		phi[r] = 250.0+r*287.0;

	}
}

interrupt void interrupt4(void)  // interrupt service routine
{
	switch_state();
	int left_sample = input_sample();
	if(count_switch>1) //more than one switch
	{
		led_blinker();
		output_sample(0);
	}
	else if(switch5 && !switch6 && !switch7 && !switch8) //switch

	{
		led_numberfive();
		if(LED_succesion_flag == 1 && m < 1024 && hundred >
                99){
			microphone[m]= left_sample;
			m++;
		}
		hundred++;
		if(m==1024)
		{
			flag = 1;
		}
		output_sample(0);
	}
	else if(!switch5 && switch6 && !switch7 && !switch8){
        //switch 6 output

		output=(microphone[n]);
		n++;
		n = n%8000;
		output_sample(output);
	}
	else{
		output_sample(0);}

	return;
}
int flag1=0;
int flag2=0;

//***************************************************//
//****************gpio functions*********************//
//***************************************************//
void GPIOBank8Pin10PinMuxSetup(void)
{
    unsigned int savePinmux = 0;
    /*
     ** Clearing the bit in context and retaining the other bit values
     ** in PINMUX10 register.
     */
    savePinmux = (HWREG(SOC_SYSCFG_0_REGS + SYSCFG0_PINMUX(18)) &
                  ~(SYSCFG_PINMUX18_PINMUX18_31_28));

    /* Setting the pins corresponding to GP8[10] in PINMUX10 register.*/
    HWREG(SOC_SYSCFG_0_REGS + SYSCFG0_PINMUX(18)) =
    (PINMUX18_GPIO8_10_ENABLE | savePinmux);
}

void GPIOBank8Pin12PinMuxSetup(void)
{
    unsigned int savePinmux = 0;
    /*
     ** Clearing the bit in context and retaining the other bit values
     ** in PINMUX10 register.
     */
    savePinmux = (HWREG(SOC_SYSCFG_0_REGS + SYSCFG0_PINMUX(18)) &
                  ~(SYSCFG_PINMUX18_PINMUX18_23_20));

    /* Setting the pins corresponding to GP8[12] in PINMUX10 register.*/
    HWREG(SOC_SYSCFG_0_REGS + SYSCFG0_PINMUX(18)) =
    (PINMUX18_GPIO8_12_ENABLE | savePinmux);
}

int main(void)
{
	int i; //record voice
	for (i=0;i<1024;i++){
		microphone[i]=0;
	}
	for (i=0;i<1024;i++) //hanning calculation
	{
		hanning[i]= alpha - beta*cos(2*PI*i/(N-1));
	}
	counter = 0;

	L138_initialise_intr(FS_16000_HZ,ADC_GAIN_12DB,DAC_ATTEN_0DB,
        LCDK_MIC_INPUT);
	LCDK_GPIO_init();
	LCDK_LED_init();
	LCDK_SWITCH_init();

	  /* The Local PSC number for GPIO is 3. GPIO belongs to PSC1 module.*/
	    PSCModuleControl(SOC_PSC_1_REGS, HW_PSC_GPIO, PSC_POWERDOMAIN_ALWAYS_ON,
	                     PSC_MDCTL_NEXT_ENABLE);

	    /* Pin Multiplexing of pin 10 of GPIO Bank 8.*/
	    GPIOBank8Pin10PinMuxSetup();

	    /* Pin Multiplexing of pin 12 of GPIO Bank 8.*/
	    GPIOBank8Pin12PinMuxSetup();

	    /* Sets the pin 139 (GP8[10]) as input. */
	    GPIODirModeSet(SOC_GPIO_0_REGS, 139, GPIO_DIR_OUTPUT);

	    /* Sets the pin 141 (GP8[12]) as input. */
	    GPIODirModeSet(SOC_GPIO_0_REGS, 141, GPIO_DIR_OUTPUT);


	while(flag1==0){if(flag==1){flag1=1;}}
	flag1=1;

	if (m >= 1024) //hanning product
	{
		for (i=0;i<1024;i++)
		{
			product[i] = hanning[i] * microphone[i];
		}
	}

	// Copy input data to the array used by DSPLib functions
	int o;
	for (o=0; o<N; o++)
	{
		x_sp[2*o]   = product[o];
		x_sp[2*o+1] = 0.0;
	}

	// Call twiddle function to generate twiddle factors needed
        //for FFT and IFFT functions
	gen_twiddle_fft_sp(w_sp,N);

	// Call FFT routine
	DSPF_sp_fftSPxSP(N,x_sp,w_sp,y_sp,brev,4,0,N);

	// Call routine to separate the real and imaginary parts of
        //data
	// Results saved to floats y_real_sp and y_imag_sp
	separateRealImg (); //seprate real and imag fft values
	magnitudeFFT(); //calculate fft magnitude
	fMelCalc(); //mel frequency function call
	phiCalc(); //phi function call
	for(i=0; i<28; i++) //calculate lambdas
	{
		lambda[i] = (int)(513.0*phi[i]/8000.0);
	}

	//filter
	for (n = 0; n < 26; n++){
		for (k = 0; k < 513; k++){
			if (k+1 < (int16_t)lambda[n])
				freqResp[n][k] = 0;
			else if (k+1 <= (int16_t)lambda[n+1]) {
				freqResp[n][k] = ((k+1) -
                                lambda[n])/(lambda[n+1] - lambda[n]);
				if (freqResp[n][k] < 0.0)
					freqResp[n][k] = freqResp[n]
                                       [k] * -1.0;
			}
			else if (k+1 <= (int16_t)lambda[n+2]){
				freqResp[n][k] = (lambda[n+2] -
                                (k+1))/(lambda[n+2] - lambda[n+1]);
				if (freqResp[n][k] < 0.0)
					freqResp[n][k] = freqResp[n]
                                        [k] * -1.0;
			}
			else
				freqResp[n][k] = 0;
		}
	}

	//multiply and accumulate
	for(i=0; i<26; i++)
	{
		multAccum[i]=0;
	}

	for(i=0; i<26; i++)
	{
		for(k=0; k<513;k++)
		{
			multAccum[i]+=magnitude[k]*freqResp[i][k];
		}
	}

	//calculate Xi
	for(i=0; i<26; i++)
	{
		xi[i]=log10(multAccum[i]);
	}
	//mfcc coefficients
	for (i=0;i<13;i++)
	{
		mfcc[i]=0;
	}
	for(i=0;i<13; i++)
	{
		for(k=0;k<26;k++)
		{
			mfcc[i] += xi[k]*cos((float)(i+1)*((float)
                        (k+1)-0.5)*(PI/26.0));
		}
	}

	//preprocessing
	for (i = 0; i < 13; i++) {
		y[i] = mfcc[i] - x1step1xoffset[i];
		y[i] *= x1step1gain[i];
		y[i] += x1step1ymin;
	};

	// Compute weights for hidden layer neurons
	for (i = 0; i < 5; i++) {
		for(k = 0; k < 13; k++)
			temp += weight1[i][k] * y[k];
		temp += b1[i];
		h[i] = (2.0 / (1.0 + exp(-2.0 * temp))) - 1.0;
		temp = 0.0;
	}

	// Compute weights for output layer neurons
	for (i = 0; i < 4; i++) {
		for(k = 0; k < 5; k++)
			temp += weight2[i][k] * h[k];
		ox[i] = temp + b2[i];

		temp = 0.0;
	}

	//vowel recognition
	for(i = 0; i < 4; i++)
		temp += exp(ox[i]);

	for(i = 0; i < 4; i++)
		output1[i] = exp(ox[i]) / temp;

	//if entry is "forward" send two high signals
	if(output1[0] > .6)
	{
	   GPIOPinWrite(SOC_GPIO_0_REGS, 141, GPIO_PIN_HIGH);
	   GPIOPinWrite(SOC_GPIO_0_REGS, 139, GPIO_PIN_HIGH);
	}
	//if entry is "left" send one high and one low
	else if(output1[1] > .6)
	{
	   GPIOPinWrite(SOC_GPIO_0_REGS, 141, GPIO_PIN_HIGH);
	   GPIOPinWrite(SOC_GPIO_0_REGS, 139, GPIO_PIN_LOW);
	}
	//if entry is "right" sent one low and one high
	else if(output1[2] > .6)
	{
	   GPIOPinWrite(SOC_GPIO_0_REGS, 141, GPIO_PIN_LOW);
	   GPIOPinWrite(SOC_GPIO_0_REGS, 139, GPIO_PIN_HIGH);
	}
	//if entry is "back" send two low signals
	else if(output1[3] > .6)
	{
	   GPIOPinWrite(SOC_GPIO_0_REGS, 141, GPIO_PIN_LOW);
	   GPIOPinWrite(SOC_GPIO_0_REGS, 139, GPIO_PIN_LOW);
	}



	while(1);

}
